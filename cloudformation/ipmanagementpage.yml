
Parameters:
  customDomainName:
    Type: String
    Description: Custom Domain Name for IP Logger static management site. ex. ip.yourdomain.com
  HostedZoneId:
    Type: String
    Description: Hosted Zone ID for domain in route 53
  CertficateARN:
    Type: String
    Description: Certficate Manager certficate amazon resource name(ARN), FROM us-east-1
  UserName:
    Type: String
    Description: Username for static management site login
  Password:
    Type: String
    Description: Password for static management site login

AWSTemplateFormatVersion: '2010-09-09'
Resources:
  staticSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  staticSiteBucketLogging:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  s3Origin:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: IP Management Static site origin
        Name: !Sub iplogger-origin-${AWS::Region}
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  cloudFrontIPPageCFDistribution:
    Type: AWS::CloudFront::Distribution
    Properties: 
      DistributionConfig: 
        Aliases: 
          - !Ref customDomainName
        Comment: ip logger management static site
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS         
          TargetOriginId: !Ref customDomainName
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: Yes
          OriginRequestPolicyId: "88a5eaf4-2fd4-4709-b370-b4c650ea3fcf"
          ResponseHeadersPolicyId: "eaab4381-ed33-4a86-88ca-d9558dc6cd63"
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt authFunction.FunctionARN
        CacheBehaviors:
          - AllowedMethods: 
              - GET
              - HEAD
              - DELETE
              - POST
              - OPTIONS
              - PUT
              - PATCH
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            Compress: True
            PathPattern: /api*
            TargetOriginId: !Sub "${customDomainName}/api"
            ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: false
        Origins: 
          - DomainName: !GetAtt staticSiteBucket.DomainName
            Id: !Ref customDomainName
            OriginAccessControlId: !GetAtt s3Origin.Id
            S3OriginConfig: 
              OriginAccessIdentity: ''
          - DomainName: !ImportValue apiInvokeUrl
            Id: !Sub "${customDomainName}/api"
            OriginPath: !ImportValue defaultStage
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: 'https-only'
              OriginSSLProtocols: 
                - TLSv1.2
        ViewerCertificate:
          AcmCertificateArn: !Ref CertficateARN
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Logging:
          Bucket: !GetAtt staticSiteBucketLogging.DomainName
  authFunction:
    Type: AWS::CloudFront::Function
    Properties: 
      AutoPublish: true
      FunctionCode: 
        Fn::Sub: |
          function handler(event) {
              var authHeaders = event.request.headers.authorization;
              //https://gist.github.com/oeon/0ada0457194ebf70ec2428900ba76255
              function b2a(a) {
                var c, d, e, f, g, h, i, j, o, b = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", k = 0, l = 0, m = "", n = [];
                if (!a) return a;
                do c = a.charCodeAt(k++), d = a.charCodeAt(k++), e = a.charCodeAt(k++), j = c << 16 | d << 8 | e, 
                f = 63 & j >> 18, g = 63 & j >> 12, h = 63 & j >> 6, i = 63 & j, n[l++] = b.charAt(f) + b.charAt(g) + b.charAt(h) + b.charAt(i); while (k < a.length);
                return m = n.join(""), o = a.length % 3, (o ? m.slice(0, o - 3) :m) + "===".slice(o || 3);
              }

              // The Base64-encoded Auth string that should be present.
              // It is an encoding of `Basic base64([username]:[password])`
              // The username and password are:
              //      Username: john
              //      Password: foobar
              // var expected = "Basic am9objpmb29iYXI=";
              var concat = "${UserName}:${Password}"
              var encode = b2a(concat)
              var expected = "Basic " + encode
              // If an Authorization header is supplied and it's an exact match, pass the
              // request on through to CF/the origin without any modification.
              if (authHeaders && authHeaders.value === expected) {
                return event.request;
              } else if (authHeaders && authHeaders.value !== expected) {
                console.log("expected value: ", authHeaders.value, "supplied value: ", expected)
              }
              // But if we get here, we must either be missing the auth header or the
              // credentials failed to match what we expected.
              // Request the browser present the Basic Auth dialog.
              var response = {
                statusCode: 401,
                statusDescription: "Unauthorized",
                headers: {
                  "www-authenticate": {
                    value: 'Basic realm="Enter credentials for this super secure site"',
                  },
                },
              };
            
              return response;
            }
      FunctionConfig: 
        Comment: Simple HTTP Auth function for ip logging site.
        Runtime: cloudfront-js-1.0
      Name: !Sub cf-${AWS::Region}-ipauth
  StaticResourcesBucketPolicy:  
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref staticSiteBucket
      PolicyDocument:
        Version: '2008-10-17'
        Id: !Sub s3-cloudfront-${customDomainName}
        Statement:
          - Sid: !Sub allow-cloudfront-s3-${customDomainName}
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${staticSiteBucket}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${cloudFrontIPPageCFDistribution}
  Route53ARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref customDomainName
      HostedZoneId: !Ref HostedZoneId
      AliasTarget: 
        DNSName: !GetAtt cloudFrontIPPageCFDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2
      Type: A

  

  # OriginAccessIdentity:
  #   Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
  #   Properties:
  #     CloudFrontOriginAccessIdentityConfig:
  #       Comment: !Sub ${AWS::StackName}-s3-origin-origin-access-identityv

